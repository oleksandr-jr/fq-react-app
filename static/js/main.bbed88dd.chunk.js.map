{"version":3,"sources":["service/CourseDataService.js","component/ListCoursesComponent.jsx","component/CourseComponent.jsx","component/InstructorApp.jsx","App.js","serviceWorker.js","index.js"],"names":["INSTRUCTOR_API_URL","concat","service_CourseDataService","name","axios","get","id","delete","course","put","post","ListCoursesComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","courses","message","deleteCourseClicked","bind","assertThisInitialized","updateCourseClicked","addCourseClicked","refreshCourses","_this2","CourseDataService","retrieveAllCourses","then","response","setState","data","_this3","deleteCourse","history","push","console","log","_this4","react_default","a","createElement","className","class","map","key","description","onClick","Component","CourseComponent","match","params","onSubmit","validate","retrieveCourse","values","errors","length","targetDate","createCourse","updateCourse","_this$state","formik_esm","initialValues","validateOnChange","validateOnBlur","enableReinitialize","component","type","disabled","InstructorApp","react_router_dom","Fragment","react_router","path","exact","App","component_InstructorApp","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wRAIMA,EAAkB,GAAAC,OADD,kCACC,iBAAAA,OAFL,gBAgCJC,EAAA,+GA1BQC,GAEf,OAAOC,IAAMC,IAAN,GAAAJ,OAAaD,EAAb,oDAGIG,EAAMG,GAEjB,OAAOF,IAAMC,IAAN,GAAAJ,OAAaD,EAAb,aAAAC,OAA2CK,yCAGzCH,EAAMG,GAEf,OAAOF,IAAMG,OAAN,GAAAN,OAAgBD,EAAhB,aAAAC,OAA8CK,yCAG5CH,EAAMG,EAAIE,GAEnB,OAAOJ,IAAMK,IAAN,GAAAR,OAAaD,EAAb,aAAAC,OAA2CK,GAAME,wCAG/CL,EAAMK,GAEf,OAAOJ,IAAMM,KAAN,GAAAT,OAAcD,EAAd,aAA6CQ,aC6D7CG,cArFX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,QAAS,GACTC,QAAS,MAEbT,EAAKU,oBAAsBV,EAAKU,oBAAoBC,KAAzBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAC3BA,EAAKa,oBAAsBb,EAAKa,oBAAoBF,KAAzBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAC3BA,EAAKc,iBAAmBd,EAAKc,iBAAiBH,KAAtBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACxBA,EAAKe,eAAiBf,EAAKe,eAAeJ,KAApBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KATPA,mFAafG,KAAKY,0DAGQ,IAAAC,EAAAb,KACbc,EAAkBC,mBApBP,eAqBNC,KACG,SAAAC,GAEIJ,EAAKK,SAAS,CAAEb,QAASY,EAASE,qDAK9B7B,GAAI,IAAA8B,EAAApB,KACpBc,EAAkBO,aA9BP,cA8BgC/B,GACtC0B,KACG,SAAAC,GACIG,EAAKF,SAAS,CAAEZ,QAAO,oBAAArB,OAAsBK,EAAtB,iBACvB8B,EAAKR,8DAOjBZ,KAAKJ,MAAM0B,QAAQC,KAAnB,2DAGgBjC,GAChBkC,QAAQC,IAAI,UAAYnC,GACxBU,KAAKJ,MAAM0B,QAAQC,KAAnB,YAAAtC,OAAoCK,qCAG/B,IAAAoC,EAAA1B,KAEL,OADAwB,QAAQC,IAAI,UAERE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,yBACC7B,KAAKI,MAAME,SAAWqB,EAAAC,EAAAC,cAAA,OAAKE,MAAM,uBAAuB/B,KAAKI,MAAME,SACpEqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SACbH,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,sBAGRF,EAAAC,EAAAC,cAAA,aAEQ7B,KAAKI,MAAMC,QAAQ2B,IACf,SAAAxC,GAAM,OACFmC,EAAAC,EAAAC,cAAA,MAAII,IAAKzC,EAAOF,IACZqC,EAAAC,EAAAC,cAAA,UAAKrC,EAAOF,IACZqC,EAAAC,EAAAC,cAAA,UAAKrC,EAAO0C,aACZP,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBK,QAAS,kBAAMT,EAAKhB,oBAAoBlB,EAAOF,MAAnF,WACJqC,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBK,QAAS,kBAAMT,EAAKnB,oBAAoBf,EAAOF,MAAnF,gBAM5BqC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBK,QAASnC,KAAKW,kBAAlD,iBA9EWyB,oCCuGpBC,cArGX,SAAAA,EAAYzC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqC,IACfxC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuC,GAAAlC,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTd,GAAIO,EAAKD,MAAM0C,MAAMC,OAAOjD,GAC5B4C,YAAa,IAGjBrC,EAAK2C,SAAW3C,EAAK2C,SAAShC,KAAdV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAChBA,EAAK4C,SAAW5C,EAAK4C,SAASjC,KAAdV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KATDA,mFAaC,IAAAgB,EAAAb,KAEhBwB,QAAQC,IAAIzB,KAAKI,MAAMd,KAGD,GAAlBU,KAAKI,MAAMd,IAIfwB,EAAkB4B,eAzBP,iBAyBkC1C,KAAKI,MAAMd,IACnD0B,KAAK,SAAAC,GAAQ,OAAIJ,EAAKK,SAAS,CAC5BgB,YAAajB,EAASE,KAAKe,iDAI9BS,GACL,IAAIC,EAAS,GAOb,OANKD,EAAOT,YAEDS,EAAOT,YAAYW,OAAS,IACnCD,EAAOV,YAAc,8CAFrBU,EAAOV,YAAc,sBAKlBU,mCAIFD,GAAQ,IAAAvB,EAAApB,KAGTR,EAAS,CACTF,GAAIU,KAAKI,MAAMd,GACf4C,YAAaS,EAAOT,YACpBY,WAAYH,EAAOG,aAGA,IAAnB9C,KAAKI,MAAMd,GACXwB,EAAkBiC,aArDX,iBAqDkCvD,GACpCwB,KAAK,kBAAMI,EAAKxB,MAAM0B,QAAQC,KAAK,cAExCT,EAAkBkC,aAxDX,iBAwDkChD,KAAKI,MAAMd,GAAIE,GACnDwB,KAAK,kBAAMI,EAAKxB,MAAM0B,QAAQC,KAAK,cAG5CC,QAAQC,IAAIkB,oCAGP,IAAAM,EAEqBjD,KAAKI,MAAzB8B,EAFDe,EAECf,YAAa5C,EAFd2D,EAEc3D,GAEnB,OACIqC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CACIC,cAAe,CAAE7D,KAAI4C,eACrBM,SAAUxC,KAAKwC,SACfY,kBAAkB,EAClBC,gBAAgB,EAChBZ,SAAUzC,KAAKyC,SACfa,oBAAoB,GAGhB,SAAC1D,GAAD,OACI+B,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACIvB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAc/D,KAAK,cAAcoE,UAAU,MACvCzB,UAAU,wBACdH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOpB,UAAU,eAAe0B,KAAK,OAAOrE,KAAK,KAAKsE,UAAQ,KAElE9B,EAAAC,EAAAC,cAAA,YAAUC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOpB,UAAU,eAAe0B,KAAK,OAAOrE,KAAK,iBAErDwC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkB0B,KAAK,UAAzC,oBA1FNpB,aCgBfsB,mLAfP,OACI/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACIhC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgC,SAAA,KACIjC,EAAAC,EAAAC,cAAA,6CACAF,EAAAC,EAAAC,cAACgC,EAAA,EAAD,KACIlC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACR,UAAW5D,IACjCgC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOC,KAAK,WAAWC,OAAK,EAACR,UAAW5D,IACxCgC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOC,KAAK,eAAeP,UAAWlB,cATlCD,aCSb4B,mLARX,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACoC,EAAD,cAJU7B,aCQE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/B,MACvB,2DCZNgC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7D,KAAK,SAAA8D,GACjCA,EAAaC","file":"static/js/main.bbed88dd.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst INSTRUCTOR = 'OnlineSchool'\nconst COURSE_API_URL = 'https://fq-backend.onrender.com'\nconst INSTRUCTOR_API_URL = `${COURSE_API_URL}/instructors/${INSTRUCTOR}`\n\nclass CourseDataService {\n\n    retrieveAllCourses(name) {\n        //console.log('executed service')\n        return axios.get(`${INSTRUCTOR_API_URL}/courses`);\n    }\n\n    retrieveCourse(name, id) {\n        //console.log('executed service')\n        return axios.get(`${INSTRUCTOR_API_URL}/courses/${id}`);\n    }\n\n    deleteCourse(name, id) {\n        //console.log('executed service')\n        return axios.delete(`${INSTRUCTOR_API_URL}/courses/${id}`);\n    }\n\n    updateCourse(name, id, course) {\n        //console.log('executed service')\n        return axios.put(`${INSTRUCTOR_API_URL}/courses/${id}`, course);\n    }\n\n    createCourse(name, course) {\n        //console.log('executed service')\n        return axios.post(`${INSTRUCTOR_API_URL}/courses/`, course);\n    }\n}\n\nexport default new CourseDataService()","import React, { Component } from 'react'\nimport CourseDataService from '../service/CourseDataService';\n\nconst INSTRUCTOR = 'in28minutes'\n\nclass ListCoursesComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            courses: [],\n            message: null\n        }\n        this.deleteCourseClicked = this.deleteCourseClicked.bind(this)\n        this.updateCourseClicked = this.updateCourseClicked.bind(this)\n        this.addCourseClicked = this.addCourseClicked.bind(this)\n        this.refreshCourses = this.refreshCourses.bind(this)\n    }\n\n    componentDidMount() {\n        this.refreshCourses();\n    }\n\n    refreshCourses() {\n        CourseDataService.retrieveAllCourses(INSTRUCTOR)//HARDCODED\n            .then(\n                response => {\n                    //console.log(response);\n                    this.setState({ courses: response.data })\n                }\n            )\n    }\n\n    deleteCourseClicked(id) {\n        CourseDataService.deleteCourse(INSTRUCTOR, id)\n            .then(\n                response => {\n                    this.setState({ message: `Delete of course ${id} Successful` })\n                    this.refreshCourses()\n                }\n            )\n\n    }\n\n    addCourseClicked() {\n        this.props.history.push(`/courses/-1`)\n    }\n\n    updateCourseClicked(id) {\n        console.log('update ' + id)\n        this.props.history.push(`/courses/${id}`)\n    }\n\n    render() {\n        console.log('render')\n        return (\n            <div className=\"container\">\n                <h3>All Courses</h3>\n                {this.state.message && <div class=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>Id</th>\n                                <th>Description</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.courses.map(\n                                    course =>\n                                        <tr key={course.id}>\n                                            <td>{course.id}</td>\n                                            <td>{course.description}</td>\n                                            <td><button className=\"btn btn-success\" onClick={() => this.updateCourseClicked(course.id)}>Update</button></td>\n                                            <td><button className=\"btn btn-warning\" onClick={() => this.deleteCourseClicked(course.id)}>Delete</button></td>\n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-success\" onClick={this.addCourseClicked}>Add</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListCoursesComponent","import React, { Component } from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport CourseDataService from '../service/CourseDataService';\n\nconst INSTRUCTOR = 'TestInstructor'\n\nclass CourseComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            id: this.props.match.params.id,\n            description: ''\n        }\n\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n\n    }\n\n    componentDidMount() {\n\n        console.log(this.state.id)\n\n        // eslint-disable-next-line\n        if (this.state.id == -1) {\n            return\n        }\n\n        CourseDataService.retrieveCourse(INSTRUCTOR, this.state.id)\n            .then(response => this.setState({\n                description: response.data.description\n            }))\n    }\n\n    validate(values) {\n        let errors = {}\n        if (!values.description) {\n            errors.description = 'Enter a Description'\n        } else if (values.description.length < 5) {\n            errors.description = 'Enter at least 5 Characters in Description'\n        }\n\n        return errors\n\n    }\n\n    onSubmit(values) {\n        let username = INSTRUCTOR\n\n        let course = {\n            id: this.state.id,\n            description: values.description,\n            targetDate: values.targetDate\n        }\n\n        if (this.state.id === -1) {\n            CourseDataService.createCourse(username, course)\n                .then(() => this.props.history.push('/courses'))\n        } else {\n            CourseDataService.updateCourse(username, this.state.id, course)\n                .then(() => this.props.history.push('/courses'))\n        }\n\n        console.log(values);\n    }\n\n    render() {\n\n        let { description, id } = this.state\n\n        return (\n            <div>\n                <h3>Course</h3>\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{ id, description }}\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form>\n                                    <ErrorMessage name=\"description\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <fieldset className=\"form-group\">\n                                        <label>Id</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"id\" disabled />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Description</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"description\" />\n                                    </fieldset>\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CourseComponent","import React, { Component } from 'react';\nimport ListCoursesComponent from './ListCoursesComponent';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport CourseComponent from './CourseComponent';\n\nclass InstructorApp extends Component {\n    render() {\n        return (\n            <Router>\n                <>\n                    <h1>JavaRush Instructor Application</h1>\n                    <Switch>\n                        <Route path=\"/\" exact component={ListCoursesComponent} />\n                        <Route path=\"/courses\" exact component={ListCoursesComponent} />\n                        <Route path=\"/courses/:id\" component={CourseComponent} />\n                    </Switch>\n                </>\n            </Router>\n        )\n    }\n}\n\nexport default InstructorApp","import React, { Component } from 'react';\nimport './App.css';\nimport InstructorApp from './component/InstructorApp';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <InstructorApp />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}